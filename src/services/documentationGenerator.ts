import { CodeContextConfig, DirectoryAnalysis } from '../types';
import path from 'path';

export async function generateDocumentation(
  analysis: DirectoryAnalysis, 
  config: CodeContextConfig
): Promise<string> {
  const dirName = path.basename(analysis.path);
  const timestamp = new Date().toISOString();
  
  let content = `# ${dirName} Directory Documentation

*Generated by CodeContext on ${timestamp}*

## Purpose
${analysis.purpose || 'This directory contains project files.'}

## Architecture
${analysis.architecture}

## Key Files
`;

  if (analysis.keyFiles.length > 0) {
    analysis.keyFiles.forEach(file => {
      content += `
### ${path.basename(file.path)}
- **Description**: ${file.description}
- **Last Modified**: ${file.lastModified}
- **Primary Functions**: ${file.primaryFunctions.join(', ')}
`;
    });
  } else {
    content += '\nNo key files identified in this directory.\n';
  }

  if (analysis.recentChanges.length > 0) {
    content += '\n## Recent Changes\n';
    analysis.recentChanges.forEach(change => {
      content += `
### ${change.date.toLocaleDateString()} - ${change.commit}
- **Description**: ${change.description}
- **Impact**: ${change.impact}
- **Files**: ${change.files.join(', ')}
`;
    });
  }

  if (analysis.improvements.length > 0) {
    content += '\n## Suggested Improvements\n';
    analysis.improvements.forEach((improvement, index) => {
      content += `${index + 1}. ${improvement}\n`;
    });
  }

  if (analysis.dependencies.length > 0) {
    content += '\n## Dependencies\n';
    const imports = analysis.dependencies.filter(d => d.type === 'import');
    const exports = analysis.dependencies.filter(d => d.type === 'export');
    const external = analysis.dependencies.filter(d => d.type === 'external');

    if (imports.length > 0) {
      content += '\n### Imports\n';
      imports.forEach(dep => {
        content += `- ${dep.name} from ${dep.from}\n`;
      });
    }

    if (exports.length > 0) {
      content += '\n### Exports\n';
      exports.forEach(dep => {
        content += `- ${dep.name}\n`;
      });
    }

    if (external.length > 0) {
      content += '\n### External Dependencies\n';
      external.forEach(dep => {
        content += `- ${dep.name}\n`;
      });
    }
  }

  content += `
---
*This documentation is automatically maintained by CodeContext. To update, run \`codecontext refresh\`.*
`;

  return content;
}